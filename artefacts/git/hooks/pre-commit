#!/bin/bash
SHELL_DIR=$(dirname $0)
source ${SHELL_DIR}/settings.sh
# check whether it is a config or code repository
IS_CONFIG={{ IS_CONFIG }}
# IS_CONFIG=N
# check whether it is a file-based or repo-based PDI setup
IS_REPO_BASED={{ IS_REPO_BASED }}
#IS_REPO_BASED=N
TEST_FAILED=" - Test - [\e[31m FAILED\e[39m ]"
TEST_PASSED=" - Test - [\e[32m PASSED\e[39m ]"
GIT_ROOT_DIR=`git rev-parse --show-toplevel`
GIT_PDI_DIR=/pdi/repo
declare -i STAT=0

# color scales: http://misc.flogisoft.com/bash/tip_colors_and_formatting

# utiltiy functions
function print_header {
  echo -e "\e[34m\e[47mRunning $@ Test\e[0m"
}

function print_failed {
  echo -e $@ ${TEST_FAILED}
}

function print_passed {
  echo -e ${TEST_PASSED}
}




# it would we good to have a switch here in case we have to check a legacy project
# in which case we have to go through all files, not just the new ones
cd ${GIT_ROOT_DIR}
if [ ${PSGRS_GIT_HOOKS_CHECKS_NEW_FILES_ONLY} = "Y" ]; then
  FILE_LIST=`git diff --cached --name-only`
else
  # get list of files known by git and exclude hidden files
  FILE_LIST=`git ls-files | grep -vE "^\..+"`
  # FILE_LIST=`find . -path ./.git -prune -o -print`
fi


PDI_KTR_AND_KJB_FILES=$(find pdi ! -type d -name '*ktr' -or -name '*kjb')



#######################################
## FILE NAME CHECKS
#######################################

# Check for non ASCII filenames
function check_for_non_ascii_filenames {
 
  # create array to hold matched values
  FILE_NAMES_WITH_NON_ASCII_CHARACTERS=()
  # create counter for matched values
  declare -i NUMBER_OF_FILE_NAMES_WITH_NON_ASCII_CHARACTERS=0
 
  # printable range starts at space character and ends with tilde
  # Note that the brackets around the tr range are required for portability
  # to Solari's /usr/bin/tr. The square bracket bytes happen to fall in
  # the designated space


  for FILE in ${FILE_LIST}
  do
    FILE_MATCH=$(echo ${FILE} | LC_ALL=C tr -d '[ -~]\0')
    if [ -n "${FILE_MATCH}" ]
    then
      FILE_NAMES_WITH_NON_ASCII_CHARACTERS+=(${FILE_MATCH})
      NUMBER_OF_FILE_NAMES_WITH_NON_ASCII_CHARACTERS+=1
    fi
  done
 
  
  echo "Number of non ASCII file names: ${NUMBER_OF_FILE_NAMES_WITH_NON_ASCII_CHARACTERS}"
 
  # error message if unacceptable files present
  if [ ${NUMBER_OF_FILE_NAMES_WITH_NON_ASCII_CHARACTERS} -gt 0 ]; then
    print_failed ${TEST_NAME}
    echo -e "\e[93mPlease only use ASCII characters for filenames!"
    echo -e "Following filenames contain non ASCII characters:"
    echo -e "${FILE_NAMES_WITH_NON_ASCII_CHARACTERS}\n"
    STAT=1
  else
    print_passed ${TEST_NAME}
  fi
  return ${STAT}
 
}


function check_for_paths_with_whitespaces  {

  TEST_NAME="Whitespaces in File Paths"
  print_header ${TEST_NAME}

  # create array to hold matched values
  PATHS_WITH_WHITESPACES=()
  # create counter for matched values
  declare -i NUMBER_OF_PATHS_WITH_WHITESPACES=0

  MY_FILE_LIST=$(find . -path pdi/.meta -prune -o -print)

  for FILE in ${MY_FILE_LIST}
  do
    FILE_MATCH=$(echo ${FILE} | grep " ")
    if [ -n "${FILE_MATCH}" ]
    then
      PATHS_WITH_WHITESPACES+=(${FILE_MATCH})
      NUMBER_OF_PATHS_WITH_WHITESPACES+=1
    fi
  done 

  echo "Number of paths with whitespaces: ${NUMBER_OF_PATHS_WITH_WHITESPACES}"

  # error message if unacceptable files present
  if [ ${NUMBER_OF_PATHS_WITH_WHITESPACES} -gt 0 ]; then
    print_failed ${TEST_NAME}
    echo -e "\e[93mPlease remove whitespaces!\e[39m"
    echo -e "Following paths contain whitespaces:"
    echo -e "${PATHS_WITH_WHITESPACES}\n"
    STAT=1
  else
    print_passed ${TEST_NAME}
  fi
  return ${STAT}
}
 
# Check new files meet naming convention
function check_new_pdi_files_meet_naming_convention {
 
  TEST_NAME="Naming Convention"
  print_header ${TEST_NAME}

  # create array to hold matched values 
  UNACCEPTABLE_PDI_FILES=()
  # create counter for matched values
  declare -i NUMBER_OF_UNACCEPTABLE_PDI_FILES=0
 
  # Get a list of new files to be pushed
  # Check which transformations don't match with the following patterns:
  # jb_filename.kjb, tr_filename.ktr
 
  for FILE in ${FILE_LIST}
  do
    FILE_MATCH=$(echo ${FILE} | grep -Ev "${PSGRS_PDI_ACCEPTED_JOB_OR_TRANSFORMATION_NAME}" | grep -E "ktr$|kjb$")
    if [ -n "${FILE_MATCH}" ]
    then
      UNACCEPTABLE_PDI_FILES+=(${FILE_MATCH})
      NUMBER_OF_UNACCEPTABLE_PDI_FILES+=1
    fi
  done
 
  echo "Number of unacceptable new PDI file names: ${NUMBER_OF_UNACCEPTABLE_PDI_FILES}"
 
  # error message if unacceptable files present
  if [ ${NUMBER_OF_UNACCEPTABLE_PDI_FILES} -gt 0 ]; then
    print_failed ${TEST_NAME}
    echo -e "\e[93mPlease only use alphanumberic filenames!"
    echo -e "Jobs/Transformations must follow the pattern:"
    echo -e " - tr_filename.ktr"
    echo -e " - jb_filename.kjb\e[39m"
    echo -e "\e[93mThe following filename(s) do not meet filename conventions:\e[39m"
    echo -e "${UNACCPETABLE_NEW_PDI_FILES}\n"
    STAT=1
  else
    print_passed ${TEST_NAME}
  fi
  return ${STAT}
}


 
# Check new files matches accepted file types
function check_supported_file_type {
 
  TEST_NAME="Accepted File Type"
  print_header ${TEST_NAME}

  # create array to hold matched values
  NOT_SUPPORTED_NEW_FILES=()
  # create counter for matched values
  declare -i NUMBER_OF_NOT_SUPPORTED_NEW_FILES=0
 
  # Get a list of new files to be pushed
  # Check if they match a list of accepted file extensions
  # Keep non matching ones
  for FILE in ${FILE_LIST}
  do
    if [ ${IS_CONFIG} = "Y" ]
    then
      FILE_MATCH=$(echo ${FILE} | grep --invert-match -E "${PSGRS_GIT_CONFIG_REPO_ACCEPTED_FILE_EXTENSIONS_REGEX}")
    else
      FILE_MATCH=$(echo ${FILE} | grep --invert-match -E "${PSGRS_GIT_CODE_REPO_ACCEPTED_FILE_EXTENSIONS_REGEX}")
    fi
    
    if [ -n "${FILE_MATCH}" ]
    then
      NOT_SUPPORTED_NEW_FILES+=(${FILE_MATCH})
      NUMBER_OF_NOT_SUPPORTED_NEW_FILES+=1
    fi
  done
 
  echo "Number of files with not supported file types: ${NUMBER_OF_NOT_SUPPORTED_NEW_FILES}"
 
  # error message if unacceptable files present
  if [ ${NUMBER_OF_NOT_SUPPORTED_NEW_FILES} -gt 0 ]; then
    print_failed ${TEST_NAME}
    echo -e "\e[93mThe following filename(s) do not match the list of accepted file extensions:\e[39m"
    echo -e "${NOT_SUPPORTED_NEW_FILES}\n"
    STAT=1
  else
    print_passed ${TEST_NAME}
  fi
  return ${STAT}
}


function check_filenames_are_lower_case {

  TEST_NAME="All File And Folder Names Are Lower Case And Without Whitespaces"
  print_header ${TEST_NAME}

  # create array to hold matched values
  FILES_WITH_UPPER_CASES_OR_WHITESPACES=()
  # create counter for matched values
  declare -i NUMBER_OF_FILES_WITH_UPPER_CASES_OR_WHITESPACES=0

 
  for FILE in ${FILE_LIST}
  do
    FILE_MATCH=$(echo ${FILE} | grep --invert-match -E "^[a-z0-9\_-\./]+$")
    if [ -n "${FILE_MATCH}" ]
    then
      FILES_WITH_UPPER_CASES_OR_WHITESPACES+=(${FILE_MATCH})
      NUMBER_OF_FILES_WITH_UPPER_CASES_OR_WHITESPACES+=1
    fi
  done
  
  echo "Number of files with upper case letters and/or whitespaces: ${NUMBER_OF_FILES_WITH_UPPER_CASES_OR_WHITESPACES}"

 
  # error message if unacceptable files present
  if [ ${NUMBER_OF_FILES_WITH_UPPER_CASES_OR_WHITESPACES} -gt 0 ]; then
    print_failed ${TEST_NAME}
    echo -e "\e[93mPlease only use lower case letters in filenames and avoid whitespaces!"
    echo -e "Following filenames contain upper case letters and/or whitespaces:"
    echo -e "${FILES_WITH_UPPER_CASES_OR_WHITESPACES}\n"
    STAT=1
  else
    print_passed ${TEST_NAME}
  fi
  return ${STAT}

}

# File or folder names do not contain `dev`, test`, `beta`, `new`, `v[0-9]{1}`
# this counteracts not using dedicated feature branches
# doing this check at the end because by now every filename should be lower case
function check_filenames_for_forbidden_keywords {

  TEST_NAME="File And Folder Names Do Not Contain ${PSGRS_FILE_OR_FOLDER_NAME_FORBIDDEN_KEYWORD}"
  print_header ${TEST_NAME}
 
  # create array to hold matched values
  FILES_WITH_FORBIDDEN_KEYWORD=()
  # create counter for matched values
  declare -i NUMBER_OF_FILES_WITH_FORBIDDEN_KEYWORD=0

 
  for FILE in ${FILE_LIST}
  do
    FILE_MATCH=$(echo ${FILE} | grep -E "${PSGRS_FILE_OR_FOLDER_NAME_FORBIDDEN_KEYWORD}")
    if [ -n "${FILE_MATCH}" ]
    then
      FILES_WITH_FORBIDDEN_KEYWORD+=(${FILE_MATCH})
      NUMBER_OF_FILES_WITH_FORBIDDEN_KEYWORD+=1
    fi
  done

  echo "Number of files with upper case letters and/or whitespaces: ${NUMBER_OF_FILES_WITH_FORBIDDEN_KEYWORD}"
 
  # error message if unacceptable files present
  if [ ${NUMBER_OF_FILES_WITH_FORBIDDEN_KEYWORD} -gt 0 ]; then
    print_failed ${TEST_NAME}
    echo -e "\e[93mPlease stop using dev, test, beta, new, v[0-9]{1} in your filenames!"
    echo -e "It gives the impression you are not using a dedicated feature branch"
    echo -e "Following filenames contain dev, test, beta, new, v[0-9]{1}:"
    echo -e "${FILES_WITH_FORBIDDEN_KEYWORD}\n"
    STAT=1
  else
    print_passed ${TEST_NAME}
  fi
  return ${STAT}

}



#######################################
## CONTENT CHECKS
#######################################

# Check for jobs and transformations whose repository path does not match their filesystem path
# applies to file-repo setup only
function check_repo_path {
 
  TEST_NAME="Check Repo Paths"
  print_header ${TEST_NAME}
  # cd ${GIT_ROOT_DIR}${GIT_PDI_DIR}
  
  MY_FILES=$(echo ${PDI_KTR_AND_KJB_FILES})
 
  declare -i COUNTER=0

  # change internal file separator so that spaces in file and folder names
  # dont cause havoc
  # SAVEIFS=${IFS}
  # IFS=$(echo -en "\n\b")

  for MY_FILE in ${MY_FILES}
  do
    FOLDER=$(dirname ${MY_FILE})
    # get rid of the `pdi/repo/` starting bit
    FOLDER=`echo ${FOLDER} | cut -c 9-`
    # `grep -m 1` replaced with `grep ... | head -n1` since some older systems do not support the first option
    REPO_FOLDER=$(grep '<directory>' $MY_FILE | head -n1 | \
      sed -e 's| *<directory>||g' \
          -e 's|&#x2f;|/|g' \
          -e 's|</directory>.*||g')
          
         
    if [[ ! "${FOLDER}" = "${REPO_FOLDER}" ]]; then
      echo "${MY_FILE} -> FILESYSTEM: ${FOLDER} -> REPO: ${REPO_FOLDER}"
      STAT=1
      COUNTER=COUNTER+1
    fi
  done

  # restore IFS
  # IFS=${SAVEIFS}
 
  if [ ${COUNTER} -gt 0 ]; then
    print_failed ${TEST_NAME}
  else
    print_passed ${TEST_NAME}
  fi
 
  return ${STAT}
}
 
 
# Check for PDI files with hardcoded IP addresses
# grep -Er "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" .
function check_hardcoded_ip {
 
  TEST_NAME="Check Hardcoded IP"
  print_header ${TEST_NAME}

  if [ -d "${GIT_ROOT_DIR}${GIT_PDI_DIR}" ]
  then

    cd ${GIT_ROOT_DIR}${GIT_PDI_DIR}
   
    # create array to hold matched values
    FILES_WITH_HARDCODED_IP=()
    # create counter for matched values
    declare -i NUMBER_OF_FILES_WITH_HARDCODED_IP=0

   
    FILES_WITH_HARDCODED_IP=$(grep -Erl "${PSGRS_PDI_IP_ADDRESS_REGEX}")
    # if the list is not empty ...
    if [ ! -z "${FILES_WITH_HARDCODED_IP}" ]; then
      NUMBER_OF_FILES_WITH_HARDCODED_IP=$(echo ${FILES_WITH_HARDCODED_IP} | wc -w )
    fi
   
    echo "Number of files PDI files with hardcoded IP addresses: ${NUMBER_OF_FILES_WITH_HARDCODED_IP}"
   
    # error message if unacceptable files present
    if [ ${NUMBER_OF_FILES_WITH_HARDCODED_IP} -gt 0 ]; then
      print_failed ${TEST_NAME}
      echo -e "\e[93mThe following filename(s) do have hard code IP addresses:\e[39m"
      echo -e "${FILES_WITH_HARDCODED_IP}\n"
      STAT=1
    else
      print_passed ${TEST_NAME}
    fi
    return ${STAT}

  fi
}
 
# Check for PDI files with hardcoded domain name
function check_hard_coded_domain_name {
 
  TEST_NAME="Check Domain Name"
  print_header ${TEST_NAME}


  if [ -d "${GIT_ROOT_DIR}${GIT_PDI_DIR}" ]
  then

    cd ${GIT_ROOT_DIR}${GIT_PDI_DIR}
   
    FILES_WITH_HARDCODED_DOMAIN_NAME=()
    declare -i NUMBER_OF_FILES_WITH_HARDCODED_DOMAIN_NAME=0
    # older versions of PDI seems to escape colon and slashes in xml, newer versions not
    # we also make sure that you can define something like this: http://${VAR_NAME}
    FILES_WITH_HARDCODED_DOMAIN_NAME=$(grep -Erl "${PSGRS_PDI_DOMAIN_NAME_REGEX}" . )
    # if the list is not empty ...
    if [ ! -z "${FILES_WITH_HARDCODED_DOMAIN_NAME}" ]; then
      NUMBER_OF_FILES_WITH_HARDCODED_DOMAIN_NAME=$(echo ${FILES_WITH_HARDCODED_DOMAIN_NAME} | wc -w )
    fi
   
    echo "Number of PDI files with hardcoded domain names: ${NUMBER_OF_FILES_WITH_HARDCODED_DOMAIN_NAME}"
   
    # error message if unacceptable files present
    if [ ${NUMBER_OF_FILES_WITH_HARDCODED_DOMAIN_NAME} -gt 0 ]; then
      print_failed ${TEST_NAME}
      echo -e "\e[93mThe following filename(s) do have hard code Domain Names:\e[39m"
      echo -e "${FILES_WITH_HARDCODED_DOMAIN_NAME}\n"
      STAT=1
    else
      print_passed ${TEST_NAME}
    fi
    return ${STAT}
  else
    echo "Skipping test since no PDI repo present ..."
  fi
}
 
 
# Check connection references do match a predefined list
function check_referenced_database_are_part_of_the_project {
 
  TEST_NAME="Check Referenced Databases Are Part of the Project"
  print_header ${TEST_NAME}

  if [ -d "${GIT_ROOT_DIR}${GIT_PDI_DIR}" ]
  then

    cd ${GIT_ROOT_DIR}${GIT_PDI_DIR}
   
    FILES_WITH_DB_CONNECTION_REFERENCE=$(grep -Erl ".*<connection>.*?</connection>.*" --include="*.kjb" --include="*.ktr" --include="*.kdb" .  || (echo ""))
   
    declare -i FILES_WITH_DB_CONNECTION_REFERENCE_COUNTER=0
    FILES_WITH_INVALID_DB_CONNECTION_REFERENCE=()

    # change internal file separator so that spaces in file and folder names
    # dont cause havoc
    SAVEIFS=${IFS}
    IFS=$(echo -en "\n\b")
   
    for FILE_WITH_DB_CONNECTION_REFERENCE in ${FILES_WITH_DB_CONNECTION_REFERENCE}
    do
      # allowed database names specified at the end here - should be externalised in the long term
      CONNECTIONS=$(grep -E ".*<connection>.*?</connection>.*" ${FILE_WITH_DB_CONNECTION_REFERENCE} | cut -d'>' -f2 | cut -d'<' -f1 | sort -u | grep -v "")
      LOCAL_COUNTER=$(echo ${CONNECTIONS} | grep -cvE "${PSGRS_PDI_ACCEPTED_DATABASE_CONNECTION_NAMES_REGEX}")
      if [ ${LOCAL_COUNTER} -gt 0 ]; then
        FILES_WITH_INVALID_DB_CONNECTION_REFERENCE+=(${FILE_WITH_DB_CONNECTION_REFERENCE})
        FILES_WITH_DB_CONNECTION_REFERENCE_COUNTER+=1
   
        echo "${FILE_WITH_DB_CONNECTION_REFERENCE} has a non-project specific connection: "
        echo ${CONNECTIONS} | grep -vE "${PSGRS_PDI_ACCEPTED_DATABASE_CONNECTION_NAMES_REGEX}"
   
      fi
    done

    # restore IFS
    IFS=${SAVEIFS}
   
   
    echo "Number of files with non-project specific database connection references: ${FILES_WITH_DB_CONNECTION_REFERENCE_COUNTER}"
    # echo "Number of unacceptable files: ${#FILES_WITH_INVALID_DB_CONNECTION_REFERENCE[*]}"
    # error message if unacceptable files present
    if [ ${FILES_WITH_DB_CONNECTION_REFERENCE_COUNTER} -gt 0 ]; then
      print_failed ${TEST_NAME}
      echo -e "\e[93mThe following filename(s) do have invalid DB references:\e[39m"
   
   
      for ITEM in ${FILES_WITH_INVALID_DB_CONNECTION_REFERENCE[*]}
      do
        echo -e "${ITEM}"
      done
      STAT=1
    else
      print_passed ${TEST_NAME}
    fi
    return ${STAT}

  else
    echo "Skipping test since no PDI repo present ..."
  fi
}


function check_parameters_and_variables_follow_naming_convention {

  TEST_NAME="Parameters and Variables Follow Naming Convetion"
  print_header ${TEST_NAME}

  if [ -d "${GIT_ROOT_DIR}${GIT_PDI_DIR}" ]
  then

    cd ${GIT_ROOT_DIR}${GIT_PDI_DIR}
   
    FILES_WITH_PARAMETERS=$(grep -Erl "\\$\{" .   || (echo ""))
   
    declare -i FILES_WITH_PARAMETERS_COUNTER=0
    FILE_WITH_INVALID_PARAMETERS=()

    # change internal file separator so that spaces in file and folder names
    # dont cause havoc
    SAVEIFS=${IFS}
    IFS=$(echo -en "\n\b")
   
    for FILE_WITH_PARAMETERS in ${FILES_WITH_PARAMETERS}
    do
      # allowed parameter names specified at the end here - should be externalised in the long term
      PARAMS_LIST=$(grep -E "\\$\{" ${FILE_WITH_PARAMETERS} | cut -d'{' -f2 | cut -d'}' -f1)
      LOCAL_COUNTER=$(echo ${PARAMS_LIST} | grep -Evc "${PSGRS_PDI_ACCEPTED_PARAMETER_OR_VARIABLE_NAME}")
      if [ ${LOCAL_COUNTER} -gt 0 ]; then
        FILE_WITH_INVALID_PARAMETERS+=(${FILE_WITH_PARAMETERS})
        FILES_WITH_PARAMETERS_COUNTER+=1
   
        echo "${FILE_WITH_PARAMETERS} has a non-project specific connection: "
        echo ${PARAMS_LIST} | grep -Ev "${PSGRS_PDI_ACCEPTED_PARAMETER_OR_VARIABLE_NAME}"
   
      fi
    done

    # restore IFS
    IFS=${SAVEIFS}
   
   
    echo "Number of files with non valid parameters: ${FILES_WITH_PARAMETERS_COUNTER}"
    # echo "Number of unacceptable files: ${#FILE_WITH_INVALID_PARAMETERS[*]}"
    # error message if unacceptable files present
    if [ ${FILES_WITH_PARAMETERS_COUNTER} -gt 0 ]; then
      print_failed ${TEST_NAME}
      echo -e "\e[93mThe following filename(s) do not have valid parameter names:\e[39m"
   
   
      for ITEM in ${FILE_WITH_INVALID_PARAMETERS[*]}
      do
        echo -e "${ITEM}"
      done
      STAT=1
    else
      print_passed ${TEST_NAME}
    fi
    return ${STAT}

  else
    echo "Skipping test since no PDI repo present ..."
  fi

}
 

#######################################
## GIT REPO CHECKS
#######################################
 
function check_supported_branch_name {
 
  TEST_NAME="Supported Branch Name"
  print_header ${TEST_NAME}
 
  cd ${GIT_ROOT_DIR}

  declare -i VALID_BRANCH_NAME_COUNT=0
 
  # create array to store branch names
  BRANCH_NAME=`git branch | while read STAR BRANCH; do echo $BRANCH; done`
 
  INVALID_BRANCH_NAMES_COUNT=$(echo ${BRANCH_NAME} | grep -Evc "${PSGRS_GIT_REPO_ACCEPTED_BRANCH_NAMES_REGEX}")
  INVALID_BRANCH_NAMES=$(echo ${BRANCH_NAME} | grep -Ev "${PSGRS_GIT_REPO_ACCEPTED_BRANCH_NAMES_REGEX}")
 
 
  # error message if unacceptable files present
  if [ ${INVALID_BRANCH_NAMES_COUNT} -gt 0 ]; then
    print_failed ${TEST_NAME}
    echo -e "\e[93mThe following branch names does not match the list of accepted ones:\e[39m"
    echo -e ${INVALID_BRANCH_NAMES}
    echo -e "Accepted Branch Names: ${PSGRS_GIT_REPO_ACCEPTED_BRANCH_NAMES_REGEX}"
    STAT=1
  else
    print_passed ${TEST_NAME}
  fi
  return ${STAT}
}
 
# Check defined database connections do match a predefined list
function check_defined_database_connections_are_part_of_the_project {
 
  TEST_NAME="Check Defined Databases Are Part of the Project"
  print_header ${TEST_NAME}

  if [ -d "${GIT_ROOT_DIR}${GIT_PDI_DIR}" ]
  then

    cd ${GIT_ROOT_DIR}${GIT_PDI_DIR}
   
    # get connection references that do not match a predefined list
    # grep -Erl "<connection>" -A+1 . | grep "<name>" | cut -d'>' -f2 | cut -d'<' -f1 | grep -cvE "hive_generic|impala_generic|mysql_process_control"
    # grep -Er "<connection>.*?</connection>" .
   
    FILES_WITH_DB_CONNECTION_DEFINITION=$(grep -Erl "*.<connection>*." || (echo ""))
   
    declare -i FILES_WITH_DB_CONNECTION_DEFINITION_COUNTER=0
    FILES_WITH_INVALID_DB_CONNECTION_DEFINITION=()

    # change internal file separator so that spaces in file and folder names
    # dont cause havoc
    SAVEIFS=${IFS}
    IFS=$(echo -en "\n\b")

    for FILE_WITH_DB_CONNECTION_REFERENCE in ${FILES_WITH_DB_CONNECTION_DEFINITION}
    do
      LOCAL_COUNTER=$(grep -E "*.<connection>*." -A+1 ${FILE_WITH_DB_CONNECTION_REFERENCE}  | grep "*.<name>*." | cut -d'>' -f2 | cut -d'<' -f1 | sort -u | grep -cvE "hive_generic|impala_generic|mysql_process_control")
      if [ ${LOCAL_COUNTER} -gt 0 ]; then
        FILES_WITH_INVALID_DB_CONNECTION_DEFINITION+=(${FILE_WITH_DB_CONNECTION_REFERENCE})
        FILES_WITH_DB_CONNECTION_DEFINITION_COUNTER+=1
      fi   
    done

    # restore IFS
    IFS=${SAVEIFS}
   
   
    echo "Number of files with project unrelated database definitions: ${FILES_WITH_DB_CONNECTION_DEFINITION_COUNTER}"
    # echo "Number of unacceptable files: ${#FILES_WITH_INVALID_DB_CONNECTION_DEFINITION[*]}"
    # error message if unacceptable files present
    if [ ${FILES_WITH_DB_CONNECTION_DEFINITION_COUNTER} -gt 0 ]; then
      print_failed ${TEST_NAME}
      echo -e "\e[93mThe following filename(s) do have invalid DB connection definitions:\e[39m"
   
   
      for ITEM in ${FILES_WITH_INVALID_DB_CONNECTION_DEFINITION[*]}
      do
        echo -e "${ITEM}"
      done
      STAT=1
    else
      print_passed ${TEST_NAME}
    fi
    return ${STAT}
  
  else
    echo "Skipping test since no PDI repo present ..."
  fi
}


#######################################
## BUNDLE CHECKS
#######################################
 
if [ ${IS_CONFIG} = "Y" ]; then
  # Checks to only run for config repos
  check_supported_file_type
  check_for_non_ascii_filenames
else
  # Checks to only run for code repos
  check_for_paths_with_whitespaces
  check_supported_file_type
  check_for_non_ascii_filenames
  check_new_pdi_files_meet_naming_convention
  check_hardcoded_ip
  check_hard_coded_domain_name
  check_defined_database_connections_are_part_of_the_project
  check_referenced_database_are_part_of_the_project
  check_parameters_and_variables_follow_naming_convention
  check_filenames_are_lower_case
  check_filenames_for_forbidden_keywords
  check_supported_branch_name
  if [ ${IS_REPO_BASED} = "Y" ]; then
    check_repo_path
  fi
fi
 
if [ ${STAT} -gt 0 ]; then
  echo ""
  echo -e "[\e[31m Too many errors. Not committing anything. Resolve issues. \e[39m ]"
  echo ""
  exit 1
fi